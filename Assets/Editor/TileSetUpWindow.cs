using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

// Based from Renaissance Coders tutorials from YT
namespace HelloWorld
{
    public class TileSetUpWindow : EditorWindow
    {
        //Left
        private TileInputSet selectedInputTileSet;
        private SerializedObject serializedTileSetObject;
        private SerializedProperty selectedDirectionInputTileList;
        private string selectedInputTileSetProperty = "";
        //Right
        private SerializedObject selectedTileConstraints;
        private SerializedProperty id;
        private SerializedProperty gameObject;
        private SerializedProperty compatibleTopList;
        private SerializedProperty compatibleBottomList;
        private SerializedProperty compatibleLeftList;
        private SerializedProperty compatibleRightList;

        private enum DirectionToSet { FourDirection, Top, Bottom, Left, Right, TopLeft, TopRight, BottomLeft, BottomRight, ITopLeft, ITopRight, IBottomLeft, IBottomRight };

        #region Window Variables
        Texture2D headerBackgroundTexture;
        Texture2D leftBackgroundTexture;
        Texture2D rightBackgroundTexture;

        Color headerBackgroundColor = new(30f / 255f, 30f / 255f, 30f / 255f, 0.5f);
        Color leftBackgroundColor = new(30f / 255f, 30f / 255f, 30f / 255f, 0.5f);
        Color rightBackgroundColor = new(0.6f, .2f, 0.7f, 0.7f);

        Rect headerSection;
        Rect tileSetupSection;
        Rect tileConstraintSetupSection;

        static int windowMinWidth = 600;
        static int windowMinHeight = 350;

        Vector2 scrollPositionLeft = Vector2.zero;
        Vector2 scrollPositionRight = Vector2.zero;
        #endregion

        [MenuItem("Custom/Tile Setup")]
        private static void StartWindow()
        {
            TileSetUpWindow window = (TileSetUpWindow)GetWindow(typeof(TileSetUpWindow));
            window.minSize = new(windowMinWidth, windowMinHeight);
            window.Show();
        }

        private void OnEnable()
        {
            InitTextures();
            InitData();
        }

        private void OnGUI()
        {
            DrawLayouts();
            DrawHeader();
            DrawLeft();
            DrawRight();
        }

        private void InitTextures()
        {
            headerBackgroundTexture = new Texture2D(1, 1);
            headerBackgroundTexture.SetPixel(0, 0, headerBackgroundColor);
            headerBackgroundTexture.Apply();

            leftBackgroundTexture = new Texture2D(1, 1);
            leftBackgroundTexture.SetPixel(0, 0, leftBackgroundColor);
            leftBackgroundTexture.Apply();

            rightBackgroundTexture = new Texture2D(1, 1);
            rightBackgroundTexture.SetPixel(0, 0, rightBackgroundColor);
            rightBackgroundTexture.Apply();
        }

        private void InitData()
        {

        }

        private void DrawLayouts()
        {
            headerSection.x = 0;
            headerSection.y = 0;
            headerSection.width = Screen.width;
            headerSection.height = 40;

            tileSetupSection.x = 0;
            tileSetupSection.y = 40;
            tileSetupSection.width = 320;
            tileSetupSection.height = Screen.height - 50;

            tileConstraintSetupSection.x = 320;
            tileConstraintSetupSection.y = 40;
            tileConstraintSetupSection.width = Screen.width - 320;
            tileConstraintSetupSection.height = Screen.height - 40;

            GUI.DrawTexture(headerSection, headerBackgroundTexture);
            GUI.DrawTexture(tileSetupSection, leftBackgroundTexture);
            //GUI.DrawTexture(tileConstraintSetupSection, rightBackgroundTexture);
        }

        private void DrawHeader()
        {
            GUILayout.BeginArea(headerSection);
            EditorGUILayout.Space(3);
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Enter Tile Set", GUILayout.Height(30), GUILayout.Width(100));
            selectedInputTileSet = (TileInputSet)EditorGUILayout.ObjectField(selectedInputTileSet, typeof(TileInputSet), false, GUILayout.Height(30));

            if (GUILayout.Button("Auto Generate", GUILayout.Height(30)))
            {
                if (selectedInputTileSet != null && serializedTileSetObject != null)
                {
                    Debug.Log("Start");
                    AutoGenerateDirect();
                }
            }

            EditorGUILayout.EndHorizontal();

            GUILayout.EndArea();
        }

        private void AutoGenerateDirect()
        {
            for (int i = 0; i < selectedInputTileSet.FourDirectionTiles.Count; i++)
            {
                selectedInputTileSet.FourDirectionTiles[i] = MainCombine(selectedInputTileSet.FourDirectionTiles[i], selectedInputTileSet, DirectionToSet.FourDirection);
            }
            for (int i = 0; i < selectedInputTileSet.TopTiles.Count; i++)
            {
                selectedInputTileSet.TopTiles[i] = MainCombine(selectedInputTileSet.TopTiles[i], selectedInputTileSet, DirectionToSet.Top);
            }
            for (int i = 0; i < selectedInputTileSet.BottomTiles.Count; i++)
            {
                selectedInputTileSet.BottomTiles[i] = MainCombine(selectedInputTileSet.BottomTiles[i], selectedInputTileSet, DirectionToSet.Bottom);
            }
            for (int i = 0; i < selectedInputTileSet.LeftTiles.Count; i++)
            {
                selectedInputTileSet.LeftTiles[i] = MainCombine(selectedInputTileSet.LeftTiles[i], selectedInputTileSet, DirectionToSet.Left);
            }
            for (int i = 0; i < selectedInputTileSet.RightTiles.Count; i++)
            {
                selectedInputTileSet.RightTiles[i] = MainCombine(selectedInputTileSet.RightTiles[i], selectedInputTileSet, DirectionToSet.Right);
            }
            /*
            for (int i = 0; i < selectedInputTileSet.TopLeftTiles.Count; i++)
            {
                selectedInputTileSet.TopLeftTiles[i] = MainCombine(selectedInputTileSet.TopLeftTiles[i], selectedInputTileSet, DirectionToSet.TopLeft);
            }
            for (int i = 0; i < selectedInputTileSet.TopRightTiles.Count; i++)
            {
                selectedInputTileSet.TopRightTiles[i] = MainCombine(selectedInputTileSet.TopRightTiles[i], selectedInputTileSet, DirectionToSet.TopRight);
            }
            for (int i = 0; i < selectedInputTileSet.BottomLeftTiles.Count; i++)
            {
                selectedInputTileSet.BottomLeftTiles[i] = MainCombine(selectedInputTileSet.BottomLeftTiles[i], selectedInputTileSet, DirectionToSet.BottomLeft);
            }
            for (int i = 0; i < selectedInputTileSet.BottomRightTiles.Count; i++)
            {
                selectedInputTileSet.BottomRightTiles[i] = MainCombine(selectedInputTileSet.BottomRightTiles[i], selectedInputTileSet, DirectionToSet.BottomRight);
            }
            */
        }

        private TileInput MainCombine(TileInput tileInput, TileInputSet set, DirectionToSet direction)
        {
            switch (direction)
            {
                //add own
                //add other/invert 4 dir
                case DirectionToSet.FourDirection:
                    #region FourDirection
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.TopTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.TopLeftTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.TopRightTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomLeftTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomRightTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.LeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.TopLeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.BottomLeftTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.RightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.TopLeftTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.BottomRightTiles);
                    break;
                    #endregion
                case DirectionToSet.Top:
                    #region Top
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.BottomTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.ITopLeftTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.ITopRightTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.FourDirectionTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomLeftTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomRightTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.TopLeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.IBottomRightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.TopRightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.IBottomLeftTiles);
                    break;
                    #endregion
                case DirectionToSet.Bottom:
                    #region Bottom
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.FourDirectionTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.TopTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.TopLeftTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.TopRightTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.TopTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.IBottomLeftTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.IBottomRightTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.BottomLeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.IBottomRightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.BottomRightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.IBottomLeftTiles);
                    #endregion
                    break;
                case DirectionToSet.Left:
                    #region Left
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.BottomLeftTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.IBottomRightTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.BottomLeftTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.ITopRightTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.RightTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.ITopLeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.IBottomLeftTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.FourDirectionTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.RightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.BottomRightTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.TopRightTiles);
                    #endregion
                    break;
                case DirectionToSet.Right:
                    #region Right
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.BottomRightTiles);
                    tileInput.compatibleTop = SubCombine(tileInput.compatibleTop, set.IBottomLeftTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.TopRightTiles);
                    tileInput.compatibleBottom = SubCombine(tileInput.compatibleBottom, set.ITopLeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.FourDirectionTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.LeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.BottomLeftTiles);
                    tileInput.compatibleLeft = SubCombine(tileInput.compatibleLeft, set.TopLeftTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.LeftTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.IBottomLeftTiles);
                    tileInput.compatibleRight = SubCombine(tileInput.compatibleRight, set.ITopLeftTiles);
                    #endregion
                    break;
                case DirectionToSet.TopLeft:
                    #region TopLeft

                    #endregion
                    break;
                case DirectionToSet.TopRight:
                    #region TopRight

                    #endregion
                    break;
                case DirectionToSet.BottomLeft:
                    #region BottomLeft

                    #endregion
                    break;
                case DirectionToSet.BottomRight:
                    #region BottomRight

                    #endregion
                    break;
                case DirectionToSet.ITopLeft:
                    #region ITopLeft

                    #endregion
                    break;
                case DirectionToSet.ITopRight:
                    #region ITopRight

                    #endregion
                    break;
                case DirectionToSet.IBottomLeft:
                    #region IBottomLeft

                    #endregion
                    break;
                case DirectionToSet.IBottomRight:
                    #region IBottomRight

                    #endregion
                    break;
                default:
                    break;
            }
            return tileInput;
        }
        private List<TileInput> SubCombine(List<TileInput> tileConstraintsList, List<TileInput> tilesToAdd)
        {
            foreach(var item in tilesToAdd)
            {
                if (!tileConstraintsList.Contains(item))
                {
                    tileConstraintsList.Add(item);
                }
            }
            return tileConstraintsList;
        }

        private void AutoGenerateSerialized()
        {
            /*
            string[] directions = { "TopLeftTiles", "TopTiles", "TopRightTiles", "LeftTiles", "FourDirectionTiles",
            "RightTiles", "BottomLeftTiles", "BottomTiles", "BottomRightTiles"};
            */

            //TileInputSet temp = selectedInputTileSet;
            
            SerializedProperty fourDirection = serializedTileSetObject.FindProperty("FourDirectionTiles");
            SerializedProperty topDirection = serializedTileSetObject.FindProperty("TopTiles");
            SerializedProperty bottomDirection = serializedTileSetObject.FindProperty("BottomTiles");
            SerializedProperty leftDirection = serializedTileSetObject.FindProperty("LeftTiles");
            SerializedProperty rightDirection = serializedTileSetObject.FindProperty("RightTiles");

            for(int i = 0; i < fourDirection.arraySize; i++)
            {
                SerializedProperty top = fourDirection.GetArrayElementAtIndex(i).FindPropertyRelative("compatibleTop");
                SerializedProperty bottom = fourDirection.GetArrayElementAtIndex(i).FindPropertyRelative("compatibleBottom");
                SerializedProperty left = fourDirection.GetArrayElementAtIndex(i).FindPropertyRelative("compatibleLeft");
                SerializedProperty right = fourDirection.GetArrayElementAtIndex(i).FindPropertyRelative("compatibleRight");

                
                for(int j = 0; j < top.arraySize; j++)
                {
                    top.GetArrayElementAtIndex(j).objectReferenceValue = topDirection.GetArrayElementAtIndex(j).objectReferenceValue;
                }
            }

            /*
            List<TileInput> temp = selectedInputTileSet.TopLeftTiles;
            for(int i = 0; i < temp.Count; i++)
            {
                fourDirection.GetArrayElementAtIndex(i).objectReferenceValue = temp[i];
            }

            /*
            for (int i = 0; i < topDirection.arraySize; i++)
            {
                SerializedProperty listCombine;
                listCombine.InsertArrayElementAtIndex(i);
                listCombine.GetArrayElementAtIndex(i).objectReferenceValue = listCombine.GetArrayElementAtIndex(i).objectReferenceValue;
            }
            */
        }

        private void DrawLeft()
        {
            GUILayout.BeginArea(tileSetupSection);
            scrollPositionLeft = EditorGUILayout.BeginScrollView(scrollPositionLeft, false, false);
            
            #region Buttons
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("TopLeft", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("TopLeftTiles");
            }
            if (GUILayout.Button("Top", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("TopTiles");
            }
            if (GUILayout.Button("TopRight", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("TopRightTiles");
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Left", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("LeftTiles");
            }
            if (GUILayout.Button("4 Direction", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("FourDirectionTiles");
            }
            if (GUILayout.Button("Right", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("RightTiles");
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("BottomLeft", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("BottomLeftTiles");
            }
            if (GUILayout.Button("Bottom", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("BottomTiles");
            }
            if (GUILayout.Button("BottomRight", GUILayout.Height(40), GUILayout.Width(96)))
            {
                SetCurrentTileToConfig("BottomRightTiles");
            }
            EditorGUILayout.EndHorizontal();
            #endregion

            if (selectedInputTileSet != null && selectedInputTileSetProperty != "")
            {
                //EditorGUILayout.PropertyField(selectedDirectionInputTileList, true);
                EditorGUILayout.BeginVertical(GUILayout.Width(300));
                ShowTileList();
                EditorGUILayout.EndVertical();
                serializedTileSetObject.ApplyModifiedProperties();
            }

            EditorGUILayout.EndScrollView();
            EditorGUILayout.Space(10);
            GUILayout.EndArea();
        }

        private void ShowTileList()
        {
            EditorGUILayout.BeginHorizontal();
            selectedDirectionInputTileList.isExpanded = EditorGUILayout.Foldout(selectedDirectionInputTileList.isExpanded, selectedInputTileSetProperty);
            
            EditorGUILayout.EndHorizontal();
            if (selectedDirectionInputTileList.isExpanded)
            {
                EditorGUI.indentLevel++;

                for (int i = 0; i < selectedDirectionInputTileList.arraySize; i++)
                {
                    SerializedProperty elementProperty = selectedDirectionInputTileList.GetArrayElementAtIndex(i);

                    //GUIContent elementLabel = new($"Element {i + 1}");
                    EditorGUILayout.BeginHorizontal();

                    //EditorGUI.PropertyField(EditorGUILayout.GetControlRect(true), elementProperty, true);
                    EditorGUILayout.PropertyField(elementProperty);
                    if (GUILayout.Button(">", GUILayout.Width(30)))
                    {
                        Object elementReference = elementProperty.objectReferenceValue;
                        selectedTileConstraints = new(elementReference);
                    }
                    EditorGUILayout.EndHorizontal();
                }
            }
            EditorGUI.indentLevel++;
        }

        private void SetCurrentTileToConfig(string property)
        {
            serializedTileSetObject = new(selectedInputTileSet);
            selectedInputTileSetProperty = property;
            serializedTileSetObject.Update();
            selectedDirectionInputTileList = serializedTileSetObject.FindProperty(property);
            selectedDirectionInputTileList.isExpanded = true;
        }

        private void DrawRight()
        {
            GUILayout.BeginArea(tileConstraintSetupSection);
            scrollPositionRight = EditorGUILayout.BeginScrollView(scrollPositionRight);

            if (selectedTileConstraints != null)
            {
                selectedTileConstraints.Update();

                EditorGUILayout.Space(5);

                id = selectedTileConstraints.FindProperty("id");
                gameObject = selectedTileConstraints.FindProperty("gameObject");
                compatibleTopList = selectedTileConstraints.FindProperty("compatibleTop");
                compatibleBottomList = selectedTileConstraints.FindProperty("compatibleBottom");
                compatibleLeftList = selectedTileConstraints.FindProperty("compatibleLeft");
                compatibleRightList = selectedTileConstraints.FindProperty("compatibleRight");

                EditorGUILayout.PropertyField(id);
                EditorGUILayout.PropertyField(gameObject);
                EditorGUILayout.PropertyField(compatibleTopList, true);
                EditorGUILayout.PropertyField(compatibleBottomList, true);
                EditorGUILayout.PropertyField(compatibleLeftList, true);
                EditorGUILayout.PropertyField(compatibleRightList, true);

                selectedTileConstraints.ApplyModifiedProperties();
                
            }
            EditorGUILayout.EndScrollView();
            EditorGUILayout.Space(20);
            GUILayout.EndArea();
        }
    }
}
